{"version":3,"file":"index.js","sources":["../src/core/proxy.ts","../src/util.ts","../src/bridge/type.ts","../src/bridge/serializer.ts","../src/bridge/deserializer.ts","../src/bridge/sender.ts","../src/bridge/index.ts","../src/core/context.ts","../src/core/index.ts"],"sourcesContent":["export interface BridgeContext {\r\n  addAccessTrace(pathName: string | symbol, level: number): void\r\n  invoke(args: any[]): Promise<any>\r\n}\r\n\r\nfunction createHandler(o: any, context: BridgeContext, level: number): ProxyHandler<any> {\r\n  return {\r\n    get(_, path): any {\r\n      context.addAccessTrace(path, level)\r\n\r\n      return new Proxy(o[path] ?? function fake() {}, createHandler(o, context, level + 1))\r\n    },\r\n    apply(_: any, __: any, argArray: any[]): any {\r\n      return context.invoke(argArray)\r\n    }\r\n  }\r\n}\r\n\r\nconst createProxy = <T> (val: T, ctx: BridgeContext): T => {\r\n  return new Proxy(val, createHandler(val, ctx, 1))\r\n}\r\n\r\nexport default createProxy\r\n","/**\r\n * 判断是否为 promise\r\n */\r\nexport const isPromise = (val: unknown): val is Promise<unknown> => {\r\n  return (\r\n    val !== null &&\r\n    typeof val === 'object' &&\r\n    typeof (val as Promise<unknown>).then === 'function' &&\r\n    typeof (val as Promise<unknown>).catch === 'function'\r\n  )\r\n}\r\n\r\n\r\n/**\r\n * 深拷贝\r\n */\r\nexport const deepCopy = <T> (target: T): T => {\r\n  if (!target) {\r\n    return target\r\n  }\r\n  if (Array.isArray(target)) {\r\n    const result = []\r\n    for (const objElement of target) {\r\n      result.push(deepCopy(objElement))\r\n    }\r\n    // @ts-expect-error value has copied\r\n    return result\r\n  } else if (typeof target === 'object') {\r\n    const result = {}\r\n    Object.entries(target).forEach(([k, v]) => {\r\n      // @ts-expect-error value has copied\r\n      result[k] = deepCopy(v)\r\n    })\r\n    // @ts-expect-error value has copied\r\n    return result\r\n  } else {\r\n    return target\r\n  }\r\n}","export interface Messages {\r\n  invoke: {\r\n    id: number\r\n    path: Array<string | symbol>\r\n    args: any[]\r\n  },\r\n  invokeById: {\r\n    id: string\r\n    args: any[]\r\n  },\r\n  invokeResponse: {\r\n    id: number\r\n    data?: any\r\n    error?: any\r\n  }\r\n}\r\n\r\n\r\n\r\nexport type MessageBody<K extends keyof Messages> = {\r\n  type: K\r\n  data: Messages[K]\r\n}\r\n\r\ntype EvtData = {\r\n  data: unknown\r\n}\r\n\r\nexport type ListenerCallback = (evt: EvtData) => void\r\n\r\nexport interface MessagePoster {\r\n  postMessage(string: string): void\r\n  addEventListener(name: 'message', callback: ListenerCallback): void\r\n  removeEventListener(name: 'message', callback: ListenerCallback): void\r\n}\r\n\r\nexport interface MessageHandler<K extends keyof Messages> {\r\n  type: K\r\n  handleMessage(data: Messages[K]): void\r\n}\r\n\r\n\r\nexport type MessageDispatchFunctionArgs<K extends keyof Messages> = Messages[K] extends null ?\r\n  [K] :\r\n  [K, Messages[K]]\r\n\r\ntype MessageDispatchFunction = <K extends keyof Messages> (...args: MessageDispatchFunctionArgs<K>) => void\r\n\r\nexport interface MessageSender {\r\n  sendMessage: MessageDispatchFunction\r\n}\r\n\r\nexport interface MessageBridge {\r\n  /**\r\n   * 添加一个拦截器.\r\n   * TODO, 同一个消息支持多个handler\r\n   * @param handler\r\n   */\r\n  addMessageHandler<K extends keyof Messages>(handler: MessageHandler<K>): void\r\n  getMessageSender(): MessageSender\r\n}\r\nexport const UNDEFINED = '$undefined$'\r\n\r\nexport type TypeofEnum =\r\n  | 'undefined'\r\n  | 'object'\r\n  | 'boolean'\r\n  | 'number'\r\n  | 'bigint'\r\n  | 'string'\r\n  | 'symbol'\r\n  | 'function';\r\n\r\nexport type Callable = (...args: any[]) => any\r\nexport type RegisterFunction = (func: Callable) => string\r\n\r\nexport interface MessageBridgeOptions {\r\n  poster: MessagePoster\r\n  /**\r\n   * 注册一个函数\r\n   * @param func\r\n   * @return {string} 函数的id\r\n   */\r\n  registerFunction: (func: Callable) => string\r\n}","import type { Callable } from '@/bridge/type'\nimport { UNDEFINED } from '@/bridge/type'\n\ntype SerializerOptions = {\n  /**\n   * 注册一个函数\n   * @param func\n   * @return {string} 函数的id\n   */\n  registerFunction: (func: Callable) => string\n}\n\nexport interface MessageSerializer {\n  serialise(data: any): string\n}\n\nconst createMessageSerializer = (options: SerializerOptions): MessageSerializer => {\n\n  function serialise0(arg: any): any {\n    if (arg === undefined || arg === null) {\n      return UNDEFINED\n    }\n    if (typeof arg === 'object') {\n      for (const key of Object.keys(arg)) {\n        arg[key] = serialise0(arg[key])\n      }\n      return arg\n    } else if (Array.isArray(arg)) {\n      for (let i = 0; i < arg.length; i++) {\n        arg[i] = serialise0(arg[i])\n      }\n    } else if (typeof arg === 'function') {\n      return '$function$' + options.registerFunction(arg)\n    } else {\n      return `$${typeof arg}$${arg}`\n    }\n  }\n\n  return {\n    serialise(data: any): string {\n      return JSON.stringify(serialise0(data))\n    }\n  }\n}\n\nexport default createMessageSerializer","import type { Callable, TypeofEnum } from '@/bridge/type'\nimport { UNDEFINED } from '@/bridge/type'\n\n\ntype DeserializerOptions = {\n  /**\n   * 生成一个回调函数，该回调在调用后需要调用对端的函数。\n   * @param peerId 对端的函数 id\n   */\n  generateCallback: (peerId: string) => Callable\n}\n\nconst createMessageDeserializer = (options: DeserializerOptions) => {\n  function resolveType(raw: string): TypeofEnum | undefined {\n    if (raw[0] !== '$') {\n      return\n    }\n    const p = raw.indexOf('$', 1)\n    if (p == -1) {\n      return undefined\n    }\n    // @ts-expect-error result is not in 'typeof'\n    return raw.substring(1, p)\n  }\n\n  function deserializes0(arg: any): any {\n    if (!arg || arg === UNDEFINED) {\n      return undefined\n    }\n    if (typeof arg === 'object') {\n      for (const key of Object.keys(arg)) {\n        arg[key] = deserializes0(arg[key])\n      }\n      return arg\n    } else if (Array.isArray(arg)) {\n      for (let i = 0; i < arg.length; i++) {\n        arg[i] = deserializes0(arg[i])\n      }\n      return arg\n    }\n    // expected string here\n    if (typeof arg !== 'string') {\n      throw new Error(`Unexpected type ${typeof arg}`)\n    }\n    const type = resolveType(arg)\n    if (!type) {\n      throw new Error('No type found: ' + arg)\n    }\n    if (type === 'function') {\n      return options.generateCallback(arg.substring(type.length + 2))\n    }\n    const value = arg.substring(type.length + 2)\n    switch (type) {\n    case 'number':\n      return Number.parseInt(value)\n    case 'string':\n      return value\n    case 'boolean':\n      return value === 'true'\n    default:\n      // TODO 有用到剩下的类型再加\n      throw new Error(`Unexpected type ${typeof arg}`)\n    }\n  }\n\n  return {\n    deserialize(serialisedArgs: string): any {\n      return deserializes0(JSON.parse(serialisedArgs))\n    }\n  }\n}\n\nexport default createMessageDeserializer","import type { MessageBody, MessageDispatchFunctionArgs, MessagePoster, Messages, MessageSender } from '@/bridge/type'\r\nimport { deepCopy } from '@/util'\r\nimport type { MessageSerializer } from '@/bridge/serializer'\r\n\r\n\r\n\r\nconst createMessageSender = (poster: MessagePoster, serializer: MessageSerializer): MessageSender => {\r\n  return {\r\n    sendMessage<K extends keyof Messages> (...args: MessageDispatchFunctionArgs<K>) {\r\n      const body: MessageBody<any> = {\r\n        type: args[0],\r\n        data: args[1]\r\n      }\r\n      poster.postMessage(serializer.serialise(deepCopy(body)))\r\n    }\r\n  }\r\n}\r\n\r\nexport default createMessageSender","import type {\r\n  ListenerCallback,\r\n  MessageBody,\r\n  MessageBridge,\r\n  MessageBridgeOptions,\r\n  MessageHandler,\r\n  Messages, MessageSender\r\n} from './type'\r\nimport createMessageSerializer from './serializer'\r\nimport createMessageDeserializer from '@/bridge/deserializer'\r\nimport createMessageSender from '@/bridge/sender'\r\n\r\nconst createMessageBridge = (options: MessageBridgeOptions): MessageBridge => {\r\n  const serializer = createMessageSerializer(options)\r\n  const sender = createMessageSender(options.poster, serializer)\r\n  const deserializer = createMessageDeserializer({\r\n    generateCallback: (peerId) => {\r\n      return (...args: any[]) => {\r\n        sender.sendMessage('invokeById', {\r\n          id: peerId,\r\n          args\r\n        })\r\n      }\r\n    }\r\n  })\r\n  const handlerMap = new Map<keyof Messages, MessageHandler<any>>()\r\n   \r\n  const listenerCallback: ListenerCallback = (evt) => {\r\n    if (typeof evt.data !== 'string') {\r\n      return\r\n    }\r\n    const data = deserializer.deserialize(evt.data) as MessageBody<any>\r\n    if (data.type) {\r\n      handlerMap.get(data.type)?.handleMessage(data.data)\r\n    }\r\n  }\r\n  // TODO remove listener.\r\n  options.poster.addEventListener('message', listenerCallback)\r\n  \r\n  return {\r\n    addMessageHandler<K extends keyof Messages>(handler: MessageHandler<K>) {\r\n      handlerMap.set(handler.type, handler)\r\n    },\r\n    getMessageSender(): MessageSender {\r\n      return sender\r\n    }\r\n  }\r\n}\r\n\r\nexport default createMessageBridge","import type { Callable, MessageBridge, MessagePoster, Messages } from '@/bridge/type'\r\nimport type { BridgeContext } from './proxy'\r\nimport { isPromise } from '@/util'\r\nimport createMessageBridge from '../bridge'\r\n\r\ntype PromiseCallback = {\r\n  resolve: (value: any) => void\r\n  reject: (reason: any) => void\r\n}\r\n\r\nexport default class DefaultBridgeContext implements BridgeContext {\r\n\r\n  private delegateTarget: Record<string | symbol, any>\r\n  private visitStackTrace: Array<string | symbol> = []\r\n  private funcMapping = new Map<string, Callable>()\r\n  private pendingPromise = new Map<number, PromiseCallback>()\r\n  private lastId = 1\r\n  private invokeId = 0\r\n  private bridge: MessageBridge\r\n\r\n\r\n  constructor(delegateTarget: any, poster: MessagePoster) {\r\n    this.delegateTarget = delegateTarget\r\n    this.bridge = createMessageBridge({\r\n      poster,\r\n      registerFunction: func => {\r\n        const key = this.lastId.toString(10)\r\n        this.lastId++\r\n        this.funcMapping.set(key, func)\r\n\r\n        return key\r\n      }\r\n    })\r\n    this.bridge.addMessageHandler({\r\n      type: 'invokeById',\r\n      handleMessage: (data: Messages['invokeById']) =>{\r\n        this.funcMapping.get(data.id)?.(...data.args)\r\n      }\r\n    })\r\n    this.bridge.addMessageHandler({\r\n      type: 'invoke',\r\n      handleMessage: (data: Messages['invoke']) => {\r\n        let current = this.delegateTarget\r\n        let last = null\r\n        for (const p of data.path) {\r\n          last = current\r\n          current = current[p]\r\n        }\r\n        const val = current.apply(last, data.args)\r\n        if (isPromise(val)) {\r\n          val.then(r => {\r\n            this.bridge.getMessageSender().sendMessage('invokeResponse', {\r\n              id: data.id,\r\n              data: r\r\n            })\r\n          }).catch(e => {\r\n            this.bridge.getMessageSender().sendMessage('invokeResponse', {\r\n              id: data.id,\r\n              error: e\r\n            })\r\n          })\r\n        }\r\n      }\r\n    })\r\n    this.bridge.addMessageHandler({\r\n      type: 'invokeResponse',\r\n      handleMessage: (data: Messages['invokeResponse']) => {\r\n        const promise = this.pendingPromise.get(data.id)\r\n        if (promise) {\r\n          if (data.data) {\r\n            promise.resolve(data.data)\r\n          } else if (data.error) {\r\n            promise.reject(data.data)\r\n          } else {\r\n            promise.resolve(data.data)\r\n          }\r\n          this.pendingPromise.delete(data.id)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  addAccessTrace(pathName: string | symbol, level: number): void {\r\n    while (this.visitStackTrace.length >= level) {\r\n      this.visitStackTrace.pop()\r\n    }\r\n    this.visitStackTrace.push(pathName)\r\n  }\r\n\r\n  invoke(args: any[]): Promise<any> {\r\n    const id = this.invokeId++\r\n    this.bridge.getMessageSender().sendMessage('invoke', {\r\n      id,\r\n      path: this.visitStackTrace,\r\n      args,\r\n    })\r\n    return new Promise((resolve, reject) => {\r\n      this.pendingPromise.set(id, { resolve, reject })\r\n    })\r\n  }\r\n\r\n}\r\n\r\n","import createProxy from './proxy'\r\nimport DefaultBridgeContext from './context'\r\nimport type { MessagePoster } from '../bridge/type'\r\n\r\n\r\n\r\nexport const createBridgePeerClient = <T> (val: T, poster: MessagePoster) => {\r\n  const ctx = new DefaultBridgeContext(val, poster)\r\n  return createProxy(val, ctx)\r\n}\r\n\r\nexport const createBridePeerClientWithTypeOnly = <T> (poster: MessagePoster): T => {\r\n  const ctx = new DefaultBridgeContext({}, poster)\r\n  return createProxy({}, ctx) as T\r\n}\r\n\r\n"],"names":[],"mappings":"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"}